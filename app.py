import streamlit as st
import os
import json
from openai import OpenAI
from datetime import date, datetime
from docx import Document
from babel.dates import format_date

# ---------------------------
# LOGIN + LOG DE ACESSO
# ---------------------------
import gspread
from oauth2client.service_account import ServiceAccountCredentials

USUARIOS = {
    "herbert": "12345",
    "katia": "12345"
}

def log_acesso_google_sheets(usuario):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        #creds = ServiceAccountCredentials.from_json_keyfile_name("credenciais.json", scope)
        creds = ServiceAccountCredentials.from_json_keyfile_name("/etc/secrets/credenciais.json", scope)
        client = gspread.authorize(creds)
        sheet = client.open("Log Acessos").worksheet("Acessos")
        agora = datetime.now().strftime("%d/%m/%Y %H:%M")
        sheet.append_row([usuario, agora])
    except Exception as e:
        st.warning(f"Erro ao registrar log: {e}")

def login():
    st.title("üîí Login necess√°rio")
    usuario = st.text_input("Usu√°rio")
    senha = st.text_input("Senha", type="password")
    if st.button("Entrar"):
        if usuario in USUARIOS and USUARIOS[usuario] == senha:
            st.session_state["logado"] = True
            st.session_state["usuario_logado"] = usuario
            log_acesso_google_sheets(usuario)
        else:
            st.error("Usu√°rio ou senha incorretos.")

if "logado" not in st.session_state:
    st.session_state["logado"] = False

if not st.session_state["logado"]:
    login()
    st.stop()

# ---------------------------
# FUN√á√ïES DO APLICATIVO
# ---------------------------

def gera_oficio(demanda, client):
    response = client.chat.completions.create(
        model="gpt-4o", #"gpt-4-turbo-preview",
        response_format={"type": "json_object"},
        messages=[
            {"role": "system", "content": """
            Voc√™ √© um escritor de cartas oficiais muito confi√°vel.
            Voc√™ receber√° uma demanda de um cidad√£o e ser√° respons√°vel por criar
            cartas √†s autoridades p√∫blicas solicitando interven√ß√µes para resolver problemas comunit√°rios
            em formato json.
            
            A sa√≠da deve ter os elementos:
            1. Um termo com no m√°ximo 3 palavras que identifica o assunto da demanda. a chave desse elemento deve ser "assunto".
            2. Um resumo do tema da demanda. a chave desse elemento deve ser "resumo".
            3. O texto da carta. a chave desse elemento deve ser "texto".
            
            Por favor, preste aten√ß√£o:
            - O texto deve come√ßar com a seguinte express√£o: Cumprimentando-o cordialmente, encaminho a V. Ex.¬™...
            - O texto deve ser escrito em primeira pessoa do singular, √© uma carta de um vereador para o secret√°rio municipal.
            - O texto deve ter um par√°grafo apresentando a demanda,
               um segundo par√°grafo explicando os detalhes e
               um terceiro par√°grafo concluindo o pedido.
            - Os par√°grafos devem estar separados por quebra de linha dupla e √© obrigat√≥rio que haja 3 par√°grafos no resultado.
            - O texto deve terminar com a express√£o: ... Por oportuno, agrade√ßo a aten√ß√£o despendida e renovo meus votos de estima e considera√ß√£o.
            - O texto deve estar em portugu√™s.            
            - N√£o se esque√ßa que o elemento texto deve estar organizado em 3 par√°grafos. Caso n√£o esteja, reorganize para enviar a resposta.
            """},
            {"role": "user", "content": f"Demand: '{demanda}'"}
        ],
    )

    response_json = json.loads(response.choices[0].message.content)
    
    # Divide o texto em par√°grafos com base em quebras de linha duplas
    texto = response_json["texto"]
    paragrafos = texto.split("\n\n")

    # Verifica se existem 3 par√°grafos, caso contr√°rio divide manualmente
    if len(paragrafos) != 3:
        # Se o texto n√£o tiver 3 par√°grafos, for√ßamos a divis√£o
        texto_unico = texto.replace("\n\n", " ")  # Junta tudo em um √∫nico bloco
        partes = len(texto_unico) // 3
        paragrafos = [
            texto_unico[:partes],
            texto_unico[partes:partes * 2],
            texto_unico[partes * 2:]
        ]
    
    response_json["texto"] = "\n\n".join(paragrafos)
    
    return response_json

# Fun√ß√£o para substituir marcadores de posi√ß√£o no arquivo DOCX
def preencher_docx(num_oficio, ano_oficio, assunto, dt_envio, parag1, parag2, parag3):
    doc = Document("/etc/secrets/layout_oficio.docx")
    for p in doc.paragraphs:
        if "{{Num/Ano}}" in p.text:
            p.text = p.text.replace("{{Num/Ano}}", f"{num_oficio}-{ano_oficio}")
        if "{{Assunto}}" in p.text:
            p.text = p.text.replace("{{Assunto}}", assunto)
        if "{{DT. Envio}}" in p.text:
            p.text = p.text.replace("{{DT. Envio}}", dt_envio)
        if "{{Parag. 1}}" in p.text:
            p.text = p.text.replace("{{Parag. 1}}", parag1)
        if "{{Parag. 2}}" in p.text:
            p.text = p.text.replace("{{Parag. 2}}", parag2)
        if "{{Parag. 3}}" in p.text:
            p.text = p.text.replace("{{Parag. 3}}", parag3)
    
    # Gera o nome do arquivo sem caracteres especiais
    nome_arquivo = f"Vereador Professor Juliano Lopes_N¬∞ {num_oficio}-{ano_oficio}_{assunto.replace(' ', '-').replace('/', '_')}.docx"
    doc.save(nome_arquivo)
    return nome_arquivo

# Fun√ß√£o para converter a data para o formato por extenso
def formatar_data_por_extenso(data):
    return format_date(data, format="long", locale="pt_BR")

# ---------------------------
# CHAVE API OPENAI
# ---------------------------

api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

# ---------------------------
# INTERFACE STREAMLIT
# ---------------------------

# T√≠tulo do app
st.title("Gerador de Of√≠cios")

# Campos para inserir a demanda, n√∫mero, ano e data de envio
demanda = st.text_area("Insira a demanda:", height=200)
num_oficio = st.text_input("N√∫mero do Of√≠cio:")
ano_oficio = st.text_input("Ano do Of√≠cio:", value=str(date.today().year))
dt_envio = st.date_input("Data de Envio:", value=date.today())

# Inicializa o estado da sess√£o para armazenar os resultados gerados
if "oficio_data" not in st.session_state:
    st.session_state.oficio_data = {}

# Bot√£o para gerar o of√≠cio
if st.button("Gerar Of√≠cio"):
    # Verifica√ß√£o se os campos necess√°rios est√£o preenchidos
    if not demanda or not num_oficio or not ano_oficio or not dt_envio:
        st.error("Por favor, preencha todos os campos.")
    else:
        # Chamada da fun√ß√£o para gerar o of√≠cio
        resposta = gera_oficio(demanda, client)
        
        # Processamento da resposta
        assunto = resposta["assunto"]
        resumo = resposta["resumo"]
        texto = resposta["texto"]
        paragrafos = texto.split("\n\n")
        
        # Verifica√ß√£o para garantir que temos exatamente 3 par√°grafos
        if len(paragrafos) == 3:
            st.session_state.oficio_data = {
                "assunto": assunto,
                "resumo": resumo,
                "parag1": paragrafos[0],
                "parag2": paragrafos[1],
                "parag3": paragrafos[2],
                "num_oficio": num_oficio,
                "ano_oficio": ano_oficio,
                "dt_envio": dt_envio
            }
        else:
            st.error("Erro ao gerar o texto do of√≠cio. Tente novamente.")

# Exibe os campos edit√°veis e o bot√£o para salvar se houver dados gerados
if st.session_state.oficio_data:
    st.subheader("Assunto:")
    assunto_edit = st.text_input("Assunto", value=st.session_state.oficio_data["assunto"])
    st.subheader("Resumo:")
    resumo_edit = st.text_area("Resumo", value=st.session_state.oficio_data["resumo"], height=100)
    st.subheader("Texto do Of√≠cio:")
    parag1_edit = st.text_area("Par√°grafo 1", value=st.session_state.oficio_data["parag1"], height=100)
    parag2_edit = st.text_area("Par√°grafo 2", value=st.session_state.oficio_data["parag2"], height=100)
    parag3_edit = st.text_area("Par√°grafo 3", value=st.session_state.oficio_data["parag3"], height=100)

    # Bot√£o para salvar o arquivo DOCX editado
    if st.button("Salvar Of√≠cio Editado"):
        # Preenchimento do DOCX
        nome_arquivo = preencher_docx(
            st.session_state.oficio_data["num_oficio"],
            st.session_state.oficio_data["ano_oficio"],
            assunto_edit,
            formatar_data_por_extenso(st.session_state.oficio_data["dt_envio"]),
            parag1_edit,
            parag2_edit,
            parag3_edit
        )
        
        st.success("Of√≠cio editado salvo com sucesso!")
        st.download_button(
            label="Baixar Of√≠cio",
            data=open(nome_arquivo, "rb"),
            file_name=nome_arquivo,
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
